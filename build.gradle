buildscript {
    ext.kotlin_version = '1.3.30' // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib

    ext.junit_version = '5.4.2'
	
    // NOTE that if you upgrade implementations such as the below geopackage 
    // then also run CoordinateTestDataGeneratedFromEpsgDatabaseTest
    // to generate a file such as "/crs-transformation-adapter-test/src/test/resources/regression_results/CrsTransformationAdapterGeoPackageNGA_version_3.2.0.csv"
    ext.geopackage_version = '3.2.0' // mil.nga.geopackage:geopackage-core:3.2.0

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        
        // https://mvnrepository.com/artifact/org.jetbrains.dokka/dokka-gradle-plugin
        // https://github.com/JetBrains/kotlin-examples/blob/master/gradle/dokka-gradle-example/build.gradle
        // gradlew dokkaJavadoc
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.18"
    }
}

plugins {
    // gradlew publishToMavenLocal
    // gradlew publish
    // https://oss.sonatype.org/content/repositories/snapshots/com/programmerare/crs-transformation/
    id 'maven-publish' // https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven
    // the above configuration enables the tasks "publish" and "publishToMavenLocal"
    // which you can verify by running "gradlew tasks" (i.e. run the command with and without the above 'maven-publish')
    id 'signing'
}

// TODO add the tags @since with version number for the constant values in the class CrsTransformationAdapteeType
// e.g. @since 1.0.0 or @since 1.0.1 
ext.snapshotSuffixOrEmpty = "-SNAPSHOT" // this value should be equal to "-SNAPSHOT" or "" (for a release)
ext.crsTransformationGroupId = 'com.programmerare.crs-transformation'
ext.crsTransformationVersion = '1.0.1' + rootProject.snapshotSuffixOrEmpty

group = rootProject.crsTransformationGroupId
version = rootProject.crsTransformationVersion
ext.isReleaseVersion = !rootProject.snapshotSuffixOrEmpty.endsWith("SNAPSHOT")

ext.mavenPomUrl = "https://github.com/TomasJohansson/crsTransformations"
ext.mavenPomDeveloperName = "Tomas Johansson"
ext.mavenPomDeveloperOrganizationUrl = "https://programmerare.com"
ext.mavenPomScmConnection = "scm:git:git://github.com/TomasJohansson/crsTransformations.git"
ext.mavenPomScmDeveloperConnection = "scm:git:ssh://github.com/TomasJohansson/crsTransformations.git"
ext.mavenPomScmUrl = "https://github.com/TomasJohansson/crsTransformations"

allprojects {
    group = rootProject.crsTransformationGroupId
    version = rootProject.crsTransformationVersion

    repositories {
        maven {
            url "https://download.osgeo.org/webdav/geotools/"
            // https://github.com/akhikhl/gretty/issues/322			
            // https://download.osgeo.org/webdav/geotools/org/geotools/gt-main/20.2/
            // https://download.osgeo.org/webdav/geotools/javax/media/jai_core/1.1.3/
        }
        /*
        Problem with geotoolkit.org when upgrading to Kotlin 1.3.10 :
         Could not resolve org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.10.
         > Could not get resource 'http://maven.geotoolkit.org/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.3.10/kotlin-compiler-embeddable-1.3.10.pom'.
           > Could not HEAD 'http://maven.geotoolkit.org/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.3.10/kotlin-compiler-embeddable-1.3.10.pom'. Received status code 502 from server: Bad Gateway			
        maven {
            url "http://maven.geotoolkit.org/"
        }
        // I do not remember for sure but I believe the above geotoolkit was added because of problems 
        // with jai_core but now it seems to work without it which may be because 
        // the following has been added:	exclude group: 'javax.media', module: 'jai_core'
        */
        maven {
            url "https://repo.boundlessgeo.com/release/"
        }
        mavenCentral()
        jcenter()
        google()
    }
	

}

subprojects { p->
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'

    sourceCompatibility = 1.8
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
        kotlinOptions.javaParameters = true //Will retain parameter names e.g. useful for intellisense parameter information instead of "arg0" and "arg1" and so on
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
    }

    task dokkadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
	
    task javadocTask(type: Javadoc) {
        source = sourceSets.main.allJava
    }
    task javadocJar(type: Jar, dependsOn: javadocTask) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
	

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    if(!p.name.equals("crs-transformation-constants")) {
        dependencies {
            // implementation("org.jetbrains.kotlin:kotlin-runtime:$kotlin_version")
            // "Kotlin Runtime (deprecated, use kotlin-stdlib artifact instead)"
            // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-runtime

            implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
            // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib-jdk8/
        }
    }
    test {
        // Enable JUnit 5 (Gradle 4.6+).
        useJUnitPlatform()

        // Always run tests, even when nothing changed.
        // dependsOn 'cleanTest'

        testLogging {
            events "passed", "skipped", "failed" // , "standardOut", "standardError"
        }
    }
}

// ---------------------------------------------------------------------------
// Note that when any of the five (GeoTools , Goober , Orbis , Proj4j , NGA)
// third-part libraries below are upgraded then new test files
// should be generated with CoordinateTestDataGeneratedFromEpsgDatabaseTest 
// (with the new version number in the file suffix) and compared with previous result
// (e.g. comparing the files manually with WinMerge until more automation has been implemented)
// ---------------------------------------------------------------------------
project(':crs-transformation-adapter-impl-geotools') {
    // Clients should also add the following maven repository: "https://download.osgeo.org/webdav/geotools/"
    dependencies {
        implementation project(':crs-transformation-adapter-core')

        // https://mvnrepository.com/artifact/org.geotools/gt-main?repo=boundless
        // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        // test code will detect upgrades with the purpose to update an enum if the file name changes from "gt-api-20.2.jar"
        implementation("org.geotools:gt-main:20.2"){
            exclude group: 'javax.media', module: 'jai_core'
            // https://docs.gradle.org/current/userguide/managing_transitive_dependencies.html
        }
        implementation("org.geotools:gt-epsg-hsql:20.2") { // runtime exception if this is not included: org.opengis.referencing.NoSuchAuthorityCodeException: No code "EPSG:4326" from authority "EPSG" found for object of type "EngineeringCRS".
            exclude group: 'javax.media', module: 'jai_core'
        }
        // implementation("javax.media:jai_core:1.1.3") // otherwise geotools causes this: Could not find jai_core.jar (javax.media:jai_core:1.1.3)

        // https://mvnrepository.com/artifact/org.geotools/gt-data?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-shapefile?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-main?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-epsg-hsql?repo=boundless
        // http://geotools.org/
        // https://sourceforge.net/projects/geotools/
        // Used for shapefile parsing in the code generation module:
//        implementation group: 'org.geotools', name: 'gt-data', version: '20.2' // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
//        implementation group: 'org.geotools', name: 'gt-shapefile', version: '20.2'
    }
    publishing {
        publications {
            crstransformationsgeotools(MavenPublication) {
                artifactId = 'crs-transformation-adapter-impl-geotools'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId

                    description = 'Coordinate Reference System Transformations adapter implementation using the adaptee third-part library GeoTools.'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'LGPL (GNU Lesser General Public License)'
                            url = 'http://docs.geotools.org/latest/userguide/welcome/license.html'
                            comments = 'LGPL i.e. the same license as the used adaptee third-part library GeoTools. The artifact crs-transformation-adapter-impl-geotools is using GeoTools and the same license LGPL.'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }                
            }
        }
    }
}

project(':crs-transformation-adapter-impl-goober') {
    dependencies {
        implementation project(':crs-transformation-adapter-core')

        // https://mvnrepository.com/artifact/com.github.goober/coordinate-transformation-library
        implementation("com.github.goober:coordinate-transformation-library:1.1") // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        // test code will detect upgrades with the purpose to update an enum if the file name changes from "coordinate-transformation-library-1.1.jar"
    }
    publishing {
        publications {
            crstransformationsgoober(MavenPublication) {
                artifactId = 'crs-transformation-adapter-impl-goober'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId
                    
                    description = 'Coordinate Reference System Transformations adapter implementation using the adaptee third-part library goober/coordinate-transformation-library.'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://github.com/goober/coordinate-transformation-library/blob/master/LICENSE'
                            comments = 'Apache License 2.0, i.e. the same license as the used adaptee third-part library goober/coordinate-transformation-library. The artifact crs-transformation-adapter-impl-goober is using goober/coordinate-transformation-library and the same license Apache License 2.0.'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
    }
}

project(':crs-transformation-adapter-impl-orbisgis') {
    dependencies {
        implementation project(':crs-transformation-adapter-core')

        // https://mvnrepository.com/artifact/org.orbisgis/cts
        implementation("org.orbisgis:cts:1.5.2") // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        // test code will detect upgrades with the purpose to update an enum if the file name changes from "cts-1.5.2.jar"
    }
    publishing {
        publications {
            crstransformationsorbisgis(MavenPublication) {
                artifactId = 'crs-transformation-adapter-impl-orbisgis'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId

                    description = 'Coordinate Reference System Transformations adapter implementation using the adaptee third-part library orbisgis/cts.'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'GNU Lesser General Public License (LGPLV3+)'
                            url = 'https://github.com/orbisgis/cts/blob/master/pom.xml'
                            comments = 'LGPLV3+, i.e. the same license as the used adaptee third-part library orbisgis/cts. The artifact crs-transformation-adapter-impl-orbisgis is using orbisgis/cts and the same license LGPLV3+'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
    }
}

project(':crs-transformation-adapter-impl-proj4j') {
    dependencies {
        implementation project(':crs-transformation-adapter-core')

        // https://mvnrepository.com/artifact/org.osgeo/proj4j
        implementation("org.osgeo:proj4j:0.1.0") // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        // test code will detect upgrades with the purpose to update an enum if the file name changes from "proj4j-0.1.0.jar"
    }
    publishing {
        publications {
            crstransformationsproj4j(MavenPublication) {
                artifactId = 'crs-transformation-adapter-impl-proj4j'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId

                    description = 'Coordinate Reference System Transformations adapter implementation using the adaptee third-part library proj4j.'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://github.com/Proj4J/proj4j'
                            comments = 'Apache License 2.0, i.e. the same license as the used adaptee third-part library proj4j. The artifact crs-transformation-adapter-impl-proj4j is using proj4j and the same license Apache License 2.0.'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
    }    
}

project(':crs-transformation-adapter-impl-nga') {
    dependencies {
        implementation project(':crs-transformation-adapter-core')

        // https://mvnrepository.com/artifact/mil.nga.geopackage/geopackage
        // https://github.com/ngageoint/GeoPackage
        implementation group: 'mil.nga.geopackage', name: 'geopackage', version: "$geopackage_version" // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        implementation group: 'mil.nga.geopackage', name: 'geopackage-core', version: "$geopackage_version"
        // test code will detect upgrades with the purpose to update an enum if the file name changes from "geopackage-core-3.2.0.jar"
    }
    publishing {
        publications {
            crstransformationsnga(MavenPublication) {
                artifactId = 'crs-transformation-adapter-impl-nga'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId

                    description = 'Coordinate Reference System Transformations adapter implementation using the adaptee third-part library ngageoint/geopackage-java.'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/ngageoint/geopackage-java/blob/master/LICENSE.txt'
                            comments = 'MIT License, i.e. the same license as the used adaptee third-part library ngageoint/geopackage-java. The artifact crs-transformation-adapter-impl-nga is using ngageoint/geopackage-java and the same license MIT.'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
    }
}

project(':crs-transformation-adapter-test') {
    dependencies {
        implementation project(':crs-transformation-adapter-core'), project(':crs-transformation-adapter-impl-orbisgis'), project(':crs-transformation-adapter-impl-goober'), project(':crs-transformation-adapter-impl-geotools'), project(':crs-transformation-adapter-impl-proj4j'), project(':crs-transformation-adapter-impl-nga'), project(':crs-transformation-constants')
        // https://mvnrepository.com/artifact/org.geotools/gt-shapefile
//        implementation("group:org.geotools:gt-shapefile:19.1")
//        implementation("group:org.geotools:gt-data:19.1")
//        implementation("group:org.geotools:gt-shapefile:19.1")
// https://mvnrepository.com/artifact/org.geotools/gt-shapefile
//        implementation group: 'org.geotools', name: 'gt-shapefile', version: '19.1'
        // https://mvnrepository.com/artifact/org.mockito/mockito-core
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.27.0'

        // https://mvnrepository.com/artifact/org.junit.jupiter
        // https://github.com/junit-team/junit5/releases
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")

        // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
        // https://github.com/hamcrest/JavaHamcrest/releases
        testImplementation("org.hamcrest:hamcrest:2.1")

        // https://mvnrepository.com/artifact/com.google.guava/guava
        // https://github.com/google/guava/releases
        testImplementation group: 'com.google.guava', name: 'guava', version: '27.1-jre' // com.google.common.io
    }
}

project(':crs-transformation-code-generation') {
    // command line execution  examples:
    // gradle generateClassesWithEpsgConstants --args="v9_5_4 epsg_version_9_5_4 dbUserName dbUserPassword java"
    // gradle generateClassesWithEpsgConstants --args="v9_5_4 epsg_version_9_5_4 dbUserName dbUserPassword csv"
    task generateClassesWithEpsgConstants(type:JavaExec) {
        main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "com.programmerare.crsCodeGeneration.constantsGenerator.ConstantClassGenerator"
        classpath = sourceSets.main.runtimeClasspath
    }

    // command line execution
    // gradle generateCsvTestDataFromEpsgDatabaseAndShapefile
    // or, if something else than the default/hardcoded class name should be used:
    // gradle generateCsvTestDataFromEpsgDatabaseAndShapefile -PmainClass=com.programmerare.crs-transformation-adapter-impl-code-generation.coordinateTestDataGenerator.CoordinateTestDataGenerator
    task generateCsvTestDataFromEpsgDatabaseAndShapefile(type:JavaExec) {
        main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "com.programmerare.crs-transformation-adapter-impl-code-generation.coordinateTestDataGenerator.CoordinateTestDataGenerator"
        classpath = sourceSets.main.runtimeClasspath
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.freemarker/freemarker
        implementation("org.freemarker:freemarker:2.3.28")

        // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
        implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'
        
        // https://mvnrepository.com/artifact/org.springframework/spring-jdbc
        // https://github.com/spring-projects/spring-framework/releases
        implementation("org.springframework:spring-jdbc:5.1.6.RELEASE")
        
        // https://mvnrepository.com/artifact/org.junit.jupiter
        // https://github.com/junit-team/junit5/releases
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")


        // https://mvnrepository.com/artifact/org.geotools/gt-main?repo=boundless
//        implementation("org.geotools:gt-main:20.2") // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
//        implementation("org.geotools:gt-epsg-hsql:20.2") // runtime exception if this is not included: org.opengis.referencing.NoSuchAuthorityCodeException: No code "EPSG:4326" from authority "EPSG" found for object of type "EngineeringCRS".
//        implementation("javax.media:jai_core:1.1.3") // otherwise geotools causes this: Could not find jai_core.jar (javax.media:jai_core:1.1.3)
        // https://mvnrepository.com/artifact/org.geotools/gt-data?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-shapefile?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-main?repo=boundless
        // https://mvnrepository.com/artifact/org.geotools/gt-epsg-hsql?repo=boundless
        // http://geotools.org/
        // https://sourceforge.net/projects/geotools/
        // Used for shapefile parsing in the code generation module:
        // NOTE that if you upgrade then use file CoordinateTestDataGeneratedFromEpsgDatabaseTest
        implementation("org.geotools:gt-data:20.2"){
            exclude group: 'javax.media', module: 'jai_core'
        }
        implementation("org.geotools:gt-shapefile:20.2") {
            exclude group: 'javax.media', module: 'jai_core'
        }		
    }
}

project(':crs-transformation-adapter-core') {
    publishing {
        publications {
            crstransformationscore(MavenPublication) {
                artifactId = 'crs-transformation-adapter-core'
                from components.java
                artifact sourcesJar
                artifact dokkadocJar

                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // <name>${project.groupId}:${project.artifactId}</name>
                    name = rootProject.crsTransformationGroupId + ":" + artifactId

                    description = "Coordinate Reference System Transformations. Kotlin/JVM/Java library used for 'converting coordinates between different coordinate systems'. The core library provides an adapter interface which is implemented by other modules using different third-part libraries as adaptees."
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/TomasJohansson/crsTransformations'
                            comments = 'MIT license for the core library. The adapter libraries have the same license as the adaptee libraries.'
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
        repositories {
            maven {
                // gradlew tasks
                // gradlew publishCrstransformationscorePublicationToMavenRepository
                // https://oss.sonatype.org/content/repositories/snapshots/com/programmerare/crs-transformation/
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = rootProject.crsTransformationVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
        }
    }
    dependencies {
        // https://mvnrepository.com/artifact/org.junit.jupiter
        // https://github.com/junit-team/junit5/releases
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    }
}

project(':crs-transformation-constants') {
    publishing {
        publications {
            crstransformationsconstants(MavenPublication) {
                artifactId = 'crs-transformation-constants'
                version = '9.5.4' + rootProject.snapshotSuffixOrEmpty
                from components.java
                artifact sourcesJar
                artifact javadocJar // Only Java code in this project. No Kotlin. Therfore not using dokkadoc here
                pom {
                    // https://central.sonatype.org/pages/requirements.html
                    // A common and acceptable practice for name is to assemble it from the coordinates using Maven properties:
                    // gradlew publishCrstransformationsconstantsPublicationToMavenRepository
                    name = rootProject.crsTransformationGroupId + ":" + artifactId
                    description = 'Constants with EPSG codes for Coordinate Reference Systems. The version number is the same as the EPSG database at http://www.epsg.org or http://www.epsg-registry.org'
                    url = rootProject.mavenPomUrl
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/TomasJohansson/crsTransformations'
                            comments = 'MIT license for this library with Java constants for EPSG codes. Regarding the data itself: Ownership of the EPSG Dataset by IOGP is acknowledged. See the URL http://www.epsg.org/TermsOfUse.aspx'
                        }
                        license {
                            name = "Terms of use"
                            url = 'http://www.epsg.org/TermsOfUse.aspx'
                            comments = "Some quotes from the 'Terms of use' URL: 'The EPSG database is published by IOGP at no charge. Distribution for profit is forbidden.... Ownership of the EPSG Dataset by IOGP must be acknowledged...' See the URL for detailed information."
                        }
                    }
                    developers {
                        developer {
                            name = rootProject.mavenPomDeveloperName
                            organizationUrl = rootProject.mavenPomDeveloperOrganizationUrl
                        }
                    }
                    scm {
                        connection = rootProject.mavenPomScmConnection
                        developerConnection = rootProject.mavenPomScmDeveloperConnection
                        url = rootProject.mavenPomScmUrl
                    }
                }
            }
        }
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    // required { isReleaseVersion }
    sign publishing.publications.crstransformationsconstants    
    sign publishing.publications.crstransformationscore
    sign publishing.publications.crstransformationsgeotools
    sign publishing.publications.crstransformationsgoober
    sign publishing.publications.crstransformationsorbisgis
    sign publishing.publications.crstransformationsproj4j
    sign publishing.publications.crstransformationsnga
}

// https://stackoverflow.com/questions/35143514/publishing-of-a-modular-library-to-maven-using-gradle
//subprojects{
//    publishing {
//        publications {
//            "$project.name"(MavenPublication) {
//                groupId project.group
//                artifactId project.name
//                version project.version
//                from components.java
//            }
//        }
//    }
//}